如果用户不能确定浏览器是否支持JavaScript脚本，那么可以应用HTML提供的注释符号进行验证。HTML注释符号是以 <-- 开始以 --> 结束的。如果在此注释符号内编写 JavaScrip t脚本，对于不支持 JavaScript 的浏览器，将会把编写的 JavaScript 脚本作为注释处理。
使用 JavaScript 脚本在页面中输出一个字符串，将 JavaScript 脚本编写在 HTML 注释中，如果浏览器支持 JavaScript 将输出此字符串，如果不支持将不输出此字符串，代码如下:
<script>
<!--
document.write("您的浏览器支持JavaScript脚本!");
//-->
</script>



JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。
JavaScript 对象是变量的容器。

在 ES6 中，提供了 let 关键字和 const 关键字。
let 的声明方式与 var 相同，用 let 来代替 var 来声明变量，就可以把变量限制在当前代码块中。
使用 const 声明的是常量，其值一旦被设定便不可被更改。


var x = "John";
var y = new String("John");
typeof x // 返回 String
typeof y // 返回 Object
不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用

var x = "John";              
var y = new String("John");
(x === y) // 结果为 false，因为 x 是字符串，y 是对象
== 为绝对相等，即数据类型与值都必须相等。


JavaScript == 与 === 区别
1、对于 string、number 等基础类型，== 和 === 是有区别的
a）不同类型间比较，== 之比较 "转化成同一类型后的值" 看 "值" 是否相等，=== 如果类型不同，其结果就是不等。
 b）同类型比较，直接进行 "值" 比较，两者结果一样。
2、对于 Array,Object 等高级类型，== 和 === 是没有区别的
进行 "指针地址" 比较
3、基础类型与高级类型，== 和 === 是有区别的
a）对于 ==，将高级转化为基础类型，进行 "值" 比较
 b）因为类型不同，=== 结果为 false
4、!= 为 == 的非运算，!== 为 === 的非运算
var num=1；
var str="1"；
var test=1；

test == num   //true　相同类型　相同值 
test === num  //true　相同类型　相同值 
test !== num  //false test与num类型相同，其值也相同,　非运算肯定是false 

num == str   //true 　把str转换为数字，检查其是否相等。 
num != str   //false  == 的 非运算 
num === str  //false  类型不同，直接返回false 
num !== str  //true   num 与 str类型不同 意味着其两者不等　非运算自然是true啦



规则:如果把数字与字符串相加，结果将成为字符串！此时，先把数字转换成字符串，然后做字符串加法；
x=5+5;		//结果将是：10
y="5"+5;	//结果将是："55"
z="Hello"+5;	//结果将是："Hello5"
5+5+"abc";	//结果将是："10abc"
""+5+5+"abc";	//结果将是："55abc"
"  "+5+5+"abc";	//结果将是："  55abc"


var x = 7 % 3; // 结果为 1
var y = 7 % (-3); // 结果为 1
var z = (-7) % 3; // 结果为 -1


var person={fname:"John",lname:"Doe",age:25}; 
for (x in person)
{
    txt=txt + person[x];
}



<script>
outerloop:
for (var i = 0; i < 10; i++)
{
	innerloop:
	for (var j = 0; j < 10; j++)
	{
		if (j > 3)
		{
			document.write("<br/>");
			break;
		}
		if (i == 2)
		{
			document.write("<br/>");
			break innerloop;
		}
		if (i == 4)
		{
			document.write("<br/>");
			break outerloop;
		}
			
        document.write("i=" + i + ", j=" + j + "<br/>");
    }
}
</script>



typeof null  // 返回object

http://www.runoob.com/js/js-typeof.html

Operator + 可用于将变量转换为数字
如果变量不能转换，它仍然会是一个数字，但值为 NaN (不是一个数字):
































